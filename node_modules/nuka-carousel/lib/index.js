"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "PagingDots", {
  enumerable: true,
  get: function get() {
    return _defaultControls.PagingDots;
  }
});
Object.defineProperty(exports, "PreviousButton", {
  enumerable: true,
  get: function get() {
    return _defaultControls.PreviousButton;
  }
});
Object.defineProperty(exports, "NextButton", {
  enumerable: true,
  get: function get() {
    return _defaultControls.NextButton;
  }
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

require("wicg-inert");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _exenv = _interopRequireDefault(require("exenv"));

var _Animate = _interopRequireDefault(require("react-move/Animate"));

var easing = _interopRequireWildcard(require("d3-ease"));

var _defaultControls = require("./default-controls");

var _allTransitions = _interopRequireDefault(require("./all-transitions"));

var _announceSlide = _interopRequireWildcard(require("./announce-slide"));

var _utilities = require("./utilities/utilities");

var _styleUtilities = require("./utilities/style-utilities");

var _bootstrappingUtilities = require("./utilities/bootstrapping-utilities");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Carousel = /*#__PURE__*/function (_React$Component) {
  _inherits(Carousel, _React$Component);

  var _super = _createSuper(Carousel);

  function Carousel() {
    var _this;

    _classCallCheck(this, Carousel);

    _this = _super.apply(this, arguments);
    _this.displayName = 'Carousel';
    _this.clickDisabled = false;
    _this.latestTransitioningIndex = null;
    _this.timers = [];
    _this.touchObject = {};
    _this.controlsMap = [{
      funcName: 'renderTopLeftControls',
      key: 'TopLeft'
    }, {
      funcName: 'renderTopCenterControls',
      key: 'TopCenter'
    }, {
      funcName: 'renderTopRightControls',
      key: 'TopRight'
    }, {
      funcName: 'renderCenterLeftControls',
      key: 'CenterLeft'
    }, {
      funcName: 'renderCenterCenterControls',
      key: 'CenterCenter'
    }, {
      funcName: 'renderCenterRightControls',
      key: 'CenterRight'
    }, {
      funcName: 'renderBottomLeftControls',
      key: 'BottomLeft'
    }, {
      funcName: 'renderBottomCenterControls',
      key: 'BottomCenter'
    }, {
      funcName: 'renderBottomRightControls',
      key: 'BottomRight'
    }];
    _this.keyCodeConfig = {
      nextSlide: [39, 68, 38, 87],
      previousSlide: [37, 65, 40, 83],
      firstSlide: [81],
      lastSlide: [69],
      pause: [32]
    };
    _this.childNodesMutationObs = null;
    _this.state = _objectSpread({
      currentSlide: _this.props.slideIndex,
      dragging: false,
      easing: _this.props.disableAnimation ? '' : easing.easeCircleOut,
      hasInteraction: false,
      // to remove animation from the initial slide on the page load when non-default slideIndex is used
      isWrappingAround: false,
      left: 0,
      resetWrapAroundPosition: false,
      slideCount: (0, _bootstrappingUtilities.getValidChildren)(_this.props.children).length,
      top: 0,
      wrapToIndex: null,
      hasFocus: false
    }, (0, _utilities.calcSomeInitialState)(_this.props));
    _this.autoplayIterator = _this.autoplayIterator.bind(_assertThisInitialized(_this));
    _this.calcSlideHeightAndWidth = _this.calcSlideHeightAndWidth.bind(_assertThisInitialized(_this));
    _this.getChildNodes = _this.getChildNodes.bind(_assertThisInitialized(_this));
    _this.getMouseEvents = _this.getMouseEvents.bind(_assertThisInitialized(_this));
    _this.getOffsetDeltas = _this.getOffsetDeltas.bind(_assertThisInitialized(_this));
    _this.getTargetLeft = _this.getTargetLeft.bind(_assertThisInitialized(_this));
    _this.getTouchEvents = _this.getTouchEvents.bind(_assertThisInitialized(_this));
    _this.goToSlide = _this.goToSlide.bind(_assertThisInitialized(_this));
    _this.handleFocus = _this.handleFocus.bind(_assertThisInitialized(_this));
    _this.handleBlur = _this.handleBlur.bind(_assertThisInitialized(_this));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this.handleKeyPress = _this.handleKeyPress.bind(_assertThisInitialized(_this));
    _this.handleMouseOut = _this.handleMouseOut.bind(_assertThisInitialized(_this));
    _this.handleMouseOver = _this.handleMouseOver.bind(_assertThisInitialized(_this));
    _this.handleSwipe = _this.handleSwipe.bind(_assertThisInitialized(_this));
    _this.nextSlide = _this.nextSlide.bind(_assertThisInitialized(_this));
    _this.onResize = _this.onResize.bind(_assertThisInitialized(_this));
    _this.onVisibilityChange = _this.onVisibilityChange.bind(_assertThisInitialized(_this));
    _this.previousSlide = _this.previousSlide.bind(_assertThisInitialized(_this));
    _this.renderControls = _this.renderControls.bind(_assertThisInitialized(_this));
    _this.resetAutoplay = _this.resetAutoplay.bind(_assertThisInitialized(_this));
    _this.setDimensions = _this.setDimensions.bind(_assertThisInitialized(_this));
    _this.setLeft = _this.setLeft.bind(_assertThisInitialized(_this));
    _this.setSlideHeightAndWidth = _this.setSlideHeightAndWidth.bind(_assertThisInitialized(_this));
    _this.startAutoplay = _this.startAutoplay.bind(_assertThisInitialized(_this));
    _this.stopAutoplay = _this.stopAutoplay.bind(_assertThisInitialized(_this));
    _this.establishChildNodesMutationObserver = _this.establishChildNodesMutationObserver.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(Carousel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // see https://github.com/facebook/react/issues/3417#issuecomment-121649937
      this.mounted = true;
      this.setLeft();
      this.setDimensions();
      this.bindEvents();
      this.establishChildNodesMutationObserver();

      if (this.props.autoplay) {
        this.startAutoplay();
      }

      var keyCodeConfig = _extends({}, this.keyCodeConfig, this.props.keyCodeConfig);

      this.keyCodeMap = this.getKeyCodeMap(keyCodeConfig);
      this.getLockScrollEvents().lockTouchScroll();
      this.initializeCarouselHeight();
    } // eslint-disable-next-line complexity

  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var slideChanged = prevState.currentSlide !== this.state.currentSlide;
      var heightModeChanged = prevProps.heightMode !== this.props.heightMode;
      var axisChanged = prevProps.vertical !== this.props.vertical;
      var childrenChanged = prevProps.children !== this.props.children;

      if (axisChanged) {
        this.onResize();
      } else if (slideChanged || heightModeChanged) {
        var image = this.getCurrentChildNodeImg();

        if (image) {
          image.addEventListener('load', this.setSlideHeightAndWidth);
          image.removeEventListener('load', this.setSlideHeightAndWidth);
        } else {
          this.setSlideHeightAndWidth();
        }
      }

      if (this.state.isWrappingAround) {
        this.isWrapped = true;
      }

      var prevSlideCount = (0, _bootstrappingUtilities.getValidChildren)(prevProps.children).length;
      var slideCount = (0, _bootstrappingUtilities.getValidChildren)(this.props.children).length;
      var slideCountChanged = prevSlideCount !== slideCount;

      if (slideCountChanged) {
        this.setState({
          slideCount: slideCount,
          currentSlide: this.props.slideIndex
        });
      }

      var _this$calcSlideHeight = this.calcSlideHeightAndWidth(),
          slideHeight = _this$calcSlideHeight.slideHeight;

      var heightMismatches = slideHeight !== prevState.slideHeight;

      if (this.mounted && heightMismatches) {
        this.setDimensions();
      } else {
        var updateDimensions = slideCountChanged || (0, _utilities.shouldUpdate)(prevProps, this.props, ['cellSpacing', 'vertical', 'slideWidth', 'slideHeight', 'heightMode', 'slidesToScroll', 'slidesToShow', 'transitionMode', 'cellAlign']);

        if (updateDimensions) {
          this.setDimensions(this.props);
        }
      }

      if (childrenChanged) {
        this.initializeCarouselHeight();
      }

      if (slideCountChanged && slideCount <= this.state.currentSlide) {
        this.goToSlide(Math.max(slideCount - 1, 0), this.props);
      } else if (prevProps.slideIndex !== this.props.slideIndex && this.props.slideIndex !== this.state.currentSlide && !this.state.isWrappingAround) {
        this.goToSlide(this.props.slideIndex, this.props);
      }

      if (prevProps.autoplay !== this.props.autoplay) {
        if (this.props.autoplay) {
          this.startAutoplay();
        } else {
          this.stopAutoplay();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unbindEvents();
      this.disconnectChildNodesMutationObserver();
      this.stopAutoplay(); // see https://github.com/facebook/react/issues/3417#issuecomment-121649937

      this.mounted = false;

      for (var i = 0; i < this.timers.length; i++) {
        clearTimeout(this.timers[i]);
      }

      this.getLockScrollEvents().unlockTouchScroll();
    }
  }, {
    key: "initializeCarouselHeight",
    value: function initializeCarouselHeight() {
      var _this2 = this;

      var heightCheckDelay = 200;

      var initializeHeight = function initializeHeight(delay) {
        _this2.timers.push(setTimeout(function () {
          // If slideHeight is greater than zero, then
          // assume the app has been initialized.  If not,
          // keep trying to set dimensions until things work.
          if (_this2.state.slideHeight > 0) {
            return;
          }

          _this2.setDimensions(); // Increase delay per attempt so the checks
          // slowly decrease if content is taking forever to load.


          initializeHeight(delay + heightCheckDelay);
        }, delay));
      };

      initializeHeight(heightCheckDelay);
    }
  }, {
    key: "establishChildNodesMutationObserver",
    value: function establishChildNodesMutationObserver() {
      var _this3 = this;

      var childNodes = this.getChildNodes();

      if (childNodes.length && 'MutationObserver' in window) {
        this.childNodesMutationObs = new MutationObserver(function () {
          _this3.setSlideHeightAndWidth();
        });

        var observeChildNodeMutation = function observeChildNodeMutation(node) {
          _this3.childNodesMutationObs.observe(node, {
            attributeFilter: ['style'],
            attributeOldValue: false,
            attributes: true,
            characterData: false,
            characterDataOldValue: false,
            childList: false,
            subtree: false
          });
        };

        var childNodesArray = Array.from(childNodes);

        for (var _i = 0, _childNodesArray = childNodesArray; _i < _childNodesArray.length; _i++) {
          var childNode = _childNodesArray[_i];
          observeChildNodeMutation(childNode);
        }
      }
    }
  }, {
    key: "disconnectChildNodesMutationObserver",
    value: function disconnectChildNodesMutationObserver() {
      if (this.childNodesMutationObs instanceof MutationObserver) {
        this.childNodesMutationObs.disconnect();
      }
    }
  }, {
    key: "getLockScrollEvents",
    value: function getLockScrollEvents() {
      var _this4 = this;

      var blockEvent = function blockEvent(e) {
        if (_this4.state.dragging) {
          var direction = (0, _utilities.swipeDirection)(_this4.touchObject.startX, e.touches[0].pageX, _this4.touchObject.startY, e.touches[0].pageY, _this4.props.vertical);

          if (direction !== 0) {
            e.preventDefault();
          }
        }
      };

      var lockTouchScroll = function lockTouchScroll() {
        document.addEventListener('touchmove', blockEvent, {
          passive: false
        });
      };

      var unlockTouchScroll = function unlockTouchScroll() {
        document.removeEventListener('touchmove', blockEvent, {
          passive: false
        });
      };

      return {
        lockTouchScroll: lockTouchScroll,
        unlockTouchScroll: unlockTouchScroll
      };
    }
  }, {
    key: "getTouchEvents",
    value: function getTouchEvents() {
      var _this5 = this;

      if (this.props.swiping === false) {
        return {
          onTouchStart: this.handleMouseOver,
          onTouchEnd: this.handleMouseOut
        };
      }

      return {
        onTouchStart: function onTouchStart(e) {
          _this5.touchObject = {
            startX: e.touches[0].pageX,
            startY: e.touches[0].pageY
          };

          _this5.handleMouseOver();

          _this5.setState({
            dragging: true
          });
        },
        onTouchMove: function onTouchMove(e) {
          var direction = (0, _utilities.swipeDirection)(_this5.touchObject.startX, e.touches[0].pageX, _this5.touchObject.startY, e.touches[0].pageY, _this5.props.vertical);

          if (direction !== 0) {
            e.preventDefault();
          }

          var length = _this5.props.vertical ? Math.round(Math.sqrt(Math.pow(e.touches[0].pageY - _this5.touchObject.startY, 2))) : Math.round(Math.sqrt(Math.pow(e.touches[0].pageX - _this5.touchObject.startX, 2)));

          if (length >= 10) {
            if (_this5.clickDisabled === false) _this5.props.onDragStart(e);
            _this5.clickDisabled = true;
          }

          _this5.touchObject = {
            startX: _this5.touchObject.startX,
            startY: _this5.touchObject.startY,
            endX: e.touches[0].pageX,
            endY: e.touches[0].pageY,
            length: length,
            direction: direction
          };

          _this5.setState({
            left: _this5.props.vertical ? 0 : _this5.getTargetLeft(_this5.touchObject.length * _this5.touchObject.direction),
            top: _this5.props.vertical ? _this5.getTargetLeft(_this5.touchObject.length * _this5.touchObject.direction) : 0
          });
        },
        onTouchEnd: function onTouchEnd(e) {
          _this5.handleSwipe(e);

          _this5.handleMouseOut();
        },
        onTouchCancel: function onTouchCancel(e) {
          _this5.handleSwipe(e);
        }
      };
    }
  }, {
    key: "getMouseEvents",
    value: function getMouseEvents() {
      var _this6 = this;

      if (this.props.dragging === false) {
        return {
          onMouseOver: this.handleMouseOver,
          onMouseOut: this.handleMouseOut
        };
      }

      return {
        onMouseOver: this.handleMouseOver,
        onMouseOut: this.handleMouseOut,
        onMouseDown: function onMouseDown(e) {
          if (e.preventDefault) {
            e.preventDefault();
          }

          _this6.touchObject = {
            startX: e.clientX,
            startY: e.clientY
          };

          _this6.setState({
            dragging: true
          });
        },
        onMouseMove: function onMouseMove(e) {
          if (!_this6.state.dragging) {
            return;
          }

          var direction = (0, _utilities.swipeDirection)(_this6.touchObject.startX, e.clientX, _this6.touchObject.startY, e.clientY, _this6.props.vertical);

          if (direction !== 0) {
            e.preventDefault();
          }

          var length = _this6.props.vertical ? Math.round(Math.sqrt(Math.pow(e.clientY - _this6.touchObject.startY, 2))) : Math.round(Math.sqrt(Math.pow(e.clientX - _this6.touchObject.startX, 2))); // prevents disabling click just because mouse moves a fraction of a pixel

          if (length >= 10) {
            if (_this6.clickDisabled === false) _this6.props.onDragStart(e);
            _this6.clickDisabled = true;
          }

          _this6.touchObject = {
            startX: _this6.touchObject.startX,
            startY: _this6.touchObject.startY,
            endX: e.clientX,
            endY: e.clientY,
            length: length,
            direction: direction
          };

          _this6.setState({
            left: _this6.props.vertical ? 0 : _this6.getTargetLeft(_this6.touchObject.length * _this6.touchObject.direction),
            top: _this6.props.vertical ? _this6.getTargetLeft(_this6.touchObject.length * _this6.touchObject.direction) : 0
          });
        },
        onMouseUp: function onMouseUp(e) {
          if (_this6.touchObject.length === 0 || _this6.touchObject.length === undefined) {
            _this6.setState({
              dragging: false
            });

            return;
          }

          _this6.handleSwipe(e);
        },
        onMouseLeave: function onMouseLeave(e) {
          if (!_this6.state.dragging) {
            return;
          }

          _this6.handleSwipe(e);
        }
      };
    }
  }, {
    key: "pauseAutoplay",
    value: function pauseAutoplay() {
      if (this.props.autoplay) {
        this.autoplayPaused = true;
        this.stopAutoplay();
      }
    }
  }, {
    key: "unpauseAutoplay",
    value: function unpauseAutoplay() {
      if (this.props.autoplay && this.autoplayPaused) {
        this.startAutoplay();
        this.autoplayPaused = null;
      }
    }
  }, {
    key: "handleMouseOver",
    value: function handleMouseOver() {
      if (this.props.pauseOnHover) {
        this.pauseAutoplay();
      }
    }
  }, {
    key: "handleMouseOut",
    value: function handleMouseOut() {
      if (this.autoplayPaused) {
        this.unpauseAutoplay();
      }
    }
  }, {
    key: "handleFocus",
    value: function handleFocus() {
      this.setState({
        hasFocus: true
      });
    }
  }, {
    key: "handleBlur",
    value: function handleBlur() {
      this.setState({
        hasFocus: false
      });
    }
  }, {
    key: "handleClick",
    value: function handleClick(event) {
      if (this.clickDisabled === true) {
        if (event.metaKey || event.shiftKey || event.altKey || event.ctrlKey) {
          return;
        }

        event.preventDefault();
        event.stopPropagation();

        if (event.nativeEvent) {
          event.nativeEvent.stopPropagation();
        }
      }
    }
  }, {
    key: "handleSwipe",
    value: function handleSwipe() {
      var _this7 = this;

      var slidesToShow = this.state.slidesToShow;

      if (this.props.slidesToScroll === 'auto') {
        slidesToShow = this.state.slidesToScroll;
      }

      var touchLength = this.touchObject.length || 0; // touchLength must be longer than 1/5 the slideWidth / slidesToShow
      // for swiping to be initiated

      if (touchLength > this.state.slideWidth / slidesToShow / 5) {
        if (this.touchObject.direction === 1) {
          if (this.state.currentSlide + 1 >= this.state.slideCount && !this.props.wrapAround) {
            this.setState({
              easing: easing[this.props.edgeEasing]
            });
          } else {
            this.nextSlide();
          }
        } else if (this.touchObject.direction === -1) {
          if (this.state.currentSlide <= 0 && !this.props.wrapAround) {
            this.setState({
              easing: easing[this.props.edgeEasing]
            });
          } else {
            this.previousSlide();
          }
        }
      } else if (touchLength > 0) {
        this.goToSlide(this.state.currentSlide);
      } // wait for `handleClick` event before resetting clickDisabled


      this.timers.push(setTimeout(function () {
        _this7.clickDisabled = false;
      }, 0));
      this.touchObject = {};
      this.setState({
        dragging: false
      });
    } // eslint-disable-next-line complexity

  }, {
    key: "handleKeyPress",
    value: function handleKeyPress(e) {
      if (this.state.hasFocus && this.props.enableKeyboardControls) {
        var actionName = this.keyCodeMap[e.keyCode];

        switch (actionName) {
          case 'nextSlide':
            this.nextSlide();
            break;

          case 'previousSlide':
            this.previousSlide();
            break;

          case 'firstSlide':
            this.goToSlide(0, this.props);
            break;

          case 'lastSlide':
            this.goToSlide(this.state.slideCount - 1, this.props);
            break;

          case 'pause':
            if (this.state.pauseOnHover && this.props.autoplay) {
              this.setState({
                pauseOnHover: false
              });
              this.pauseAutoplay();
              break;
            } else {
              this.setState({
                pauseOnHover: true
              });
              this.unpauseAutoplay();
              break;
            }

        }
      }
    }
  }, {
    key: "getKeyCodeMap",
    value: function getKeyCodeMap(keyCodeConfig) {
      var keyCodeMap = {};
      Object.keys(keyCodeConfig).forEach(function (actionName) {
        keyCodeConfig[actionName].forEach(function (keyCode) {
          return keyCodeMap[keyCode] = actionName;
        });
      });
      return keyCodeMap;
    }
  }, {
    key: "autoplayIterator",
    value: function autoplayIterator() {
      if (this.props.wrapAround) {
        if (this.props.autoplayReverse) {
          this.previousSlide();
        } else {
          this.nextSlide();
        }

        return;
      }

      if (this.props.autoplayReverse) {
        if (this.state.currentSlide !== 0) {
          this.previousSlide();
        } else {
          this.stopAutoplay();
        }
      } else if (this.state.currentSlide !== this.state.slideCount - this.state.slidesToShow) {
        this.nextSlide();
      } else {
        this.stopAutoplay();
      }
    }
  }, {
    key: "startAutoplay",
    value: function startAutoplay() {
      this.autoplayID = setInterval(this.autoplayIterator, this.props.autoplayInterval);
    }
  }, {
    key: "resetAutoplay",
    value: function resetAutoplay() {
      if (this.props.autoplay && !this.autoplayPaused) {
        this.stopAutoplay();
        this.startAutoplay();
      }
    }
  }, {
    key: "stopAutoplay",
    value: function stopAutoplay() {
      if (this.autoplayID) {
        clearInterval(this.autoplayID);
      }
    } // Animation Method

  }, {
    key: "getTargetLeft",
    value: function getTargetLeft(touchOffset, slide) {
      var target = slide || this.state.currentSlide;
      var offset = (0, _styleUtilities.getAlignmentOffset)(target, _objectSpread(_objectSpread({}, this.props), this.state));
      var left = this.state.slideWidth * target;
      var lastSlide = this.state.currentSlide > 0 && target + this.state.slidesToScroll >= this.state.slideCount;

      if (lastSlide && this.props.slideWidth !== 1 && !this.props.wrapAround && this.props.slidesToScroll === 'auto') {
        left = this.state.slideWidth * this.state.slideCount - this.state.frameWidth;
        offset = 0;
        offset -= this.props.cellSpacing * (this.state.slideCount - 1);
      }

      offset -= touchOffset || 0;
      return (left - offset) * -1;
    }
  }, {
    key: "getOffsetDeltas",
    value: function getOffsetDeltas() {
      var offset = 0;

      if (this.state.isWrappingAround) {
        offset = this.getTargetLeft(null, this.state.wrapToIndex);
      } else {
        offset = this.getTargetLeft(this.touchObject.length * this.touchObject.direction);
      }

      return {
        tx: [this.props.vertical ? 0 : offset],
        ty: [this.props.vertical ? offset : 0]
      };
    }
  }, {
    key: "isEdgeSwiping",
    value: function isEdgeSwiping() {
      var _this$state = this.state,
          currentSlide = _this$state.currentSlide,
          slideCount = _this$state.slideCount,
          slideWidth = _this$state.slideWidth,
          slideHeight = _this$state.slideHeight,
          slidesToShow = _this$state.slidesToShow;

      var _this$getOffsetDeltas = this.getOffsetDeltas(),
          tx = _this$getOffsetDeltas.tx,
          ty = _this$getOffsetDeltas.ty;

      var offset = (0, _styleUtilities.getAlignmentOffset)(currentSlide, _objectSpread(_objectSpread({}, this.props), this.state));

      if (this.props.vertical) {
        var rowHeight = slideHeight / slidesToShow;
        var slidesLeftToShow = slideCount - slidesToShow;
        var lastSlideLimit = rowHeight * slidesLeftToShow;
        var offsetTy = ty[0] - offset; // returns true if ty offset is outside first or last slide

        return offsetTy > 0 || -offsetTy > lastSlideLimit;
      }

      var offsetTx = tx[0] - offset; // returns true if tx offset is outside first or last slide

      return offsetTx > 0 || -offsetTx > slideWidth * (slideCount - 1);
    } // Action Methods

  }, {
    key: "goToSlide",
    value: function goToSlide(index, props) {
      var _this8 = this;

      if (props === undefined) {
        props = this.props;
      }

      this.latestTransitioningIndex = index;
      this.setState({
        hasInteraction: true,
        easing: easing[props.easing]
      });
      var previousSlide = this.state.currentSlide;

      if (index >= this.state.slideCount || index < 0) {
        if (!props.wrapAround) {
          return;
        }

        if (index >= this.state.slideCount) {
          props.beforeSlide(this.state.currentSlide, 0);
          this.setState(function (prevState) {
            return {
              left: props.vertical ? 0 : _this8.getTargetLeft(_this8.state.slideWidth, prevState.currentSlide),
              top: props.vertical ? _this8.getTargetLeft(_this8.state.slideWidth, prevState.currentSlide) : 0,
              currentSlide: 0,
              isWrappingAround: true,
              wrapToIndex: _this8.state.slideCount
            };
          }, function () {
            _this8.timers.push(setTimeout(function () {
              if (index === _this8.latestTransitioningIndex) {
                _this8.resetAutoplay();

                if (index !== previousSlide) {
                  _this8.props.afterSlide(0);
                }
              }
            }, props.speed));
          });
          return;
        } else {
          var endSlide = index < 0 ? this.state.slideCount + index : this.state.slideCount - this.state.slidesToScroll;
          props.beforeSlide(this.state.currentSlide, endSlide);
          this.setState(function (prevState) {
            return {
              left: props.vertical ? 0 : _this8.getTargetLeft(0, prevState.currentSlide),
              top: props.vertical ? _this8.getTargetLeft(0, prevState.currentSlide) : 0,
              currentSlide: endSlide,
              isWrappingAround: true,
              wrapToIndex: index
            };
          }, function () {
            _this8.timers.push(setTimeout(function () {
              if (index === _this8.latestTransitioningIndex) {
                _this8.resetAutoplay();

                if (index !== previousSlide) {
                  _this8.props.afterSlide(_this8.state.slideCount - 1);
                }
              }
            }, props.speed));
          });
          return;
        }
      }

      this.props.beforeSlide(this.state.currentSlide, index);
      this.setState({
        currentSlide: index
      }, function () {
        _this8.timers.push(setTimeout(function () {
          if (index === _this8.latestTransitioningIndex) {
            _this8.resetAutoplay();

            if (index !== previousSlide) {
              _this8.props.afterSlide(index);
            }
          }
        }, props.speed));
      });
    }
  }, {
    key: "nextSlide",
    value: function nextSlide() {
      var _this$state2 = this.state,
          slidesToScroll = _this$state2.slidesToScroll,
          currentSlide = _this$state2.currentSlide,
          slideWidth = _this$state2.slideWidth,
          slideCount = _this$state2.slideCount;
      var targetSlideIndex = currentSlide + slidesToScroll;
      var slidesToShow = this.state.slidesToShow;

      if (this.props.slidesToScroll === 'auto') {
        var swipeDistance = this.touchObject.length;

        if (swipeDistance > 0) {
          targetSlideIndex = Math.round(swipeDistance / slideWidth) + currentSlide;
        } else {
          slidesToShow = slidesToScroll;
        }
      }

      if (currentSlide >= slideCount - slidesToShow && !this.props.wrapAround && this.props.cellAlign === 'left') {
        return;
      }

      if (this.props.wrapAround) {
        this.goToSlide(targetSlideIndex);
      } else {
        if (this.props.slideWidth !== 1) {
          this.goToSlide(targetSlideIndex);
          return;
        }

        var offset = targetSlideIndex;
        var leftAlignSlideIndex = this.props.scrollMode === 'page' ? offset : Math.min(offset, slideCount - slidesToShow);
        var nextSlideIndex = this.props.cellAlign !== 'left' ? offset : leftAlignSlideIndex; // If nextSlideIndex is larger than last index, then
        // just navigate to last index

        this.goToSlide(Math.min(nextSlideIndex, slideCount - 1));
      }
    }
  }, {
    key: "previousSlide",
    value: function previousSlide() {
      var _this$state3 = this.state,
          slidesToScroll = _this$state3.slidesToScroll,
          slideWidth = _this$state3.slideWidth,
          currentSlide = _this$state3.currentSlide;
      var targetSlideIndex = currentSlide - slidesToScroll;
      var swipeDistance = this.touchObject.length;

      if (this.props.slidesToScroll === 'auto' && swipeDistance > 0) {
        targetSlideIndex = currentSlide - Math.round(swipeDistance / slideWidth);
      }

      if (currentSlide <= 0 && !this.props.wrapAround) {
        return;
      }

      if (this.props.wrapAround) {
        this.goToSlide(targetSlideIndex);
      } else {
        this.goToSlide(Math.max(0, targetSlideIndex));
      }
    } // Bootstrapping

  }, {
    key: "bindEvents",
    value: function bindEvents() {
      if (_exenv["default"].canUseDOM) {
        (0, _utilities.addEvent)(window, 'resize', this.onResize);
        (0, _utilities.addEvent)(document, 'visibilitychange', this.onVisibilityChange);
        (0, _utilities.addEvent)(document, 'keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "onResize",
    value: function onResize() {
      this.setDimensions(null, this.props.onResize);
    }
  }, {
    key: "onVisibilityChange",
    value: function onVisibilityChange() {
      if (document.hidden) {
        this.pauseAutoplay();
      } else {
        this.unpauseAutoplay();
      }
    }
  }, {
    key: "unbindEvents",
    value: function unbindEvents() {
      if (_exenv["default"].canUseDOM) {
        (0, _utilities.removeEvent)(window, 'resize', this.onResize);
        (0, _utilities.removeEvent)(document, 'visibilitychange', this.onVisibilityChange);
        (0, _utilities.removeEvent)(document, 'keydown', this.handleKeyPress);
      }
    }
  }, {
    key: "calcSlideHeightAndWidth",
    value: function calcSlideHeightAndWidth(props) {
      // slide height
      props = props || this.props;
      var childNodes = this.getChildNodes();
      var slideHeight = (0, _bootstrappingUtilities.calculateSlideHeight)(props, this.state, childNodes); //slide width

      var _getPropsByTransition = (0, _utilities.getPropsByTransitionMode)(props, ['slidesToShow']),
          slidesToShow = _getPropsByTransition.slidesToShow;

      var frame = this.frame;
      var slideWidth;

      if (this.props.animation === 'zoom') {
        slideWidth = frame.offsetWidth - frame.offsetWidth * 15 / 100;
      } else if (typeof props.slideWidth !== 'number') {
        slideWidth = parseInt(props.slideWidth);
      } else if (props.vertical) {
        slideWidth = slideHeight / slidesToShow * props.slideWidth;
      } else {
        slideWidth = frame.offsetWidth / slidesToShow * props.slideWidth;
      }

      if (!props.vertical) {
        slideWidth -= props.cellSpacing * ((100 - 100 / slidesToShow) / 100);
      }

      return {
        slideHeight: slideHeight,
        slideWidth: slideWidth
      };
    }
  }, {
    key: "setSlideHeightAndWidth",
    value: function setSlideHeightAndWidth() {
      var _this$calcSlideHeight2 = this.calcSlideHeightAndWidth(),
          slideHeight = _this$calcSlideHeight2.slideHeight,
          slideWidth = _this$calcSlideHeight2.slideWidth;

      if (slideHeight !== this.state.slideHeight || slideWidth !== this.state.slideWidth || this.isWrapped) {
        this.isWrapped = false;
        this.setState({
          slideHeight: slideHeight,
          slideWidth: slideWidth
        });
      }
    }
  }, {
    key: "setDimensions",
    value: function setDimensions(props) {
      var stateCb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
      props = props || this.props;

      var _getPropsByTransition2 = (0, _utilities.getPropsByTransitionMode)(props, ['slidesToShow', 'cellAlign', 'scrollMode']),
          slidesToShow = _getPropsByTransition2.slidesToShow,
          cellAlign = _getPropsByTransition2.cellAlign,
          scrollMode = _getPropsByTransition2.scrollMode;

      var frame = this.frame;

      var _this$calcSlideHeight3 = this.calcSlideHeightAndWidth(props),
          slideHeight = _this$calcSlideHeight3.slideHeight,
          slideWidth = _this$calcSlideHeight3.slideWidth;

      var frameHeight = slideHeight + props.cellSpacing * (slidesToShow - 1);
      var frameWidth = props.vertical ? frameHeight : frame.offsetWidth;

      var _getPropsByTransition3 = (0, _utilities.getPropsByTransitionMode)(props, ['slidesToScroll']),
          slidesToScroll = _getPropsByTransition3.slidesToScroll;

      if (slidesToScroll === 'auto' || scrollMode === 'page') {
        slidesToScroll = Math.floor(frameWidth / (slideWidth + props.cellSpacing));
      }

      this.setState({
        frameWidth: frameWidth,
        slideHeight: slideHeight,
        slidesToScroll: slidesToScroll,
        slidesToShow: slidesToShow,
        slideWidth: slideWidth,
        cellAlign: cellAlign
      }, function () {
        stateCb();
      });
    }
  }, {
    key: "getChildNodes",
    value: function getChildNodes() {
      return this.frame.childNodes[0].childNodes;
    }
  }, {
    key: "getCurrentChildNodeImg",
    value: function getCurrentChildNodeImg() {
      var childNodes = this.getChildNodes();
      var currentChildNode = childNodes[this.props.slideIndex];
      return currentChildNode ? currentChildNode.getElementsByTagName('img')[0] : null;
    }
  }, {
    key: "setLeft",
    value: function setLeft() {
      var newLeft = this.props.vertical ? 0 : this.getTargetLeft();
      var newTop = this.props.vertical ? this.getTargetLeft() : 0;

      if (newLeft !== this.state.left || newTop !== this.state.top) {
        this.setState({
          left: newLeft,
          top: newTop
        });
      }
    }
  }, {
    key: "renderControls",
    value: function renderControls() {
      var _this9 = this;

      if (this.props.withoutControls) {
        return this.controlsMap.map(function () {
          return null;
        });
      } else {
        return this.controlsMap.map(function (_ref) {
          var funcName = _ref.funcName,
              key = _ref.key;
          var func = _this9.props[funcName];
          var controlChildren = func && typeof func === 'function' && func({
            cellAlign: _this9.props.cellAlign,
            cellSpacing: _this9.props.cellSpacing,
            currentSlide: _this9.state.currentSlide,
            defaultControlsConfig: _this9.props.defaultControlsConfig,
            frameWidth: _this9.state.frameWidth,
            goToSlide: function goToSlide(index) {
              return _this9.goToSlide(index);
            },
            left: _this9.state.left,
            nextSlide: function nextSlide() {
              return _this9.nextSlide();
            },
            previousSlide: function previousSlide() {
              return _this9.previousSlide();
            },
            scrollMode: _this9.props.scrollMode,
            slideCount: _this9.state.slideCount,
            slidesToScroll: _this9.state.slidesToScroll,
            slidesToShow: _this9.state.slidesToShow,
            slideWidth: _this9.state.slideWidth,
            top: _this9.state.top,
            vertical: _this9.props.vertical,
            wrapAround: _this9.props.wrapAround
          });
          return controlChildren && /*#__PURE__*/_react["default"].createElement("div", {
            key: key,
            className: ["slider-control-".concat(key.toLowerCase()), _this9.props.defaultControlsConfig.containerClassName || ''].join(' ').trim(),
            style: _objectSpread(_objectSpread({}, (0, _styleUtilities.getDecoratorStyles)(key)), _this9.props.getControlsContainerStyles(key))
          }, controlChildren);
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this10 = this;

      var _this$state4 = this.state,
          currentSlide = _this$state4.currentSlide,
          slideCount = _this$state4.slideCount,
          frameWidth = _this$state4.frameWidth;
      var _this$props = this.props,
          disableAnimation = _this$props.disableAnimation,
          frameOverflow = _this$props.frameOverflow,
          framePadding = _this$props.framePadding,
          renderAnnounceSlideMessage = _this$props.renderAnnounceSlideMessage,
          slidesToShow = _this$props.slidesToShow,
          vertical = _this$props.vertical;
      var duration = this.state.dragging || !this.state.dragging && this.state.resetWrapAroundPosition && this.props.wrapAround || disableAnimation || !this.state.hasInteraction ? 0 : this.props.speed;
      var frameStyles = (0, _styleUtilities.getFrameStyles)(frameOverflow, vertical, framePadding, frameWidth);
      var touchEvents = this.getTouchEvents();
      var mouseEvents = this.getMouseEvents();
      var TransitionControl = _allTransitions["default"][this.props.transitionMode];
      var validChildren = (0, _bootstrappingUtilities.getValidChildren)(this.props.children);
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: ['slider', this.props.className || ''].join(' ').trim(),
        onFocus: this.handleFocus,
        onBlur: this.handleBlur,
        ref: this.props.innerRef,
        tabIndex: 0,
        style: _extends({}, (0, _styleUtilities.getSliderStyles)(this.props.width, this.props.height), this.props.style)
      }, !this.props.autoplay && /*#__PURE__*/_react["default"].createElement(_announceSlide["default"], {
        message: renderAnnounceSlideMessage({
          currentSlide: currentSlide,
          slideCount: slideCount
        })
      }), /*#__PURE__*/_react["default"].createElement("div", _extends({
        className: "slider-frame",
        ref: function ref(frame) {
          return _this10.frame = frame;
        },
        style: frameStyles
      }, touchEvents, mouseEvents, {
        onClickCapture: this.handleClick
      }), /*#__PURE__*/_react["default"].createElement(_Animate["default"], {
        show: true,
        start: {
          tx: 0,
          ty: 0
        },
        update: function update() {
          var _this10$getOffsetDelt = _this10.getOffsetDeltas(),
              tx = _this10$getOffsetDelt.tx,
              ty = _this10$getOffsetDelt.ty;

          if (_this10.props.disableEdgeSwiping && !_this10.props.wrapAround && _this10.isEdgeSwiping()) {
            return {};
          } else {
            return {
              tx: tx,
              ty: ty,
              timing: {
                duration: duration,
                ease: _this10.state.easing
              },
              events: {
                end: function end() {
                  var newLeft = _this10.props.vertical ? 0 : _this10.getTargetLeft();
                  var newTop = _this10.props.vertical ? _this10.getTargetLeft() : 0;

                  if (newLeft !== _this10.state.left || newTop !== _this10.state.top) {
                    _this10.setState({
                      left: newLeft,
                      top: newTop,
                      isWrappingAround: false,
                      resetWrapAroundPosition: true
                    }, function () {
                      _this10.setState({
                        resetWrapAroundPosition: false
                      });
                    });
                  }
                }
              }
            };
          }
        },
        children: function children(_ref2) {
          var tx = _ref2.tx,
              ty = _ref2.ty;
          return /*#__PURE__*/_react["default"].createElement(TransitionControl, _extends({}, (0, _styleUtilities.getTransitionProps)(_this10.props, _this10.state), {
            deltaX: tx,
            deltaY: ty
          }), (0, _utilities.addAccessibility)(validChildren, slidesToShow, currentSlide));
        }
      })), this.renderControls(), this.props.autoGenerateStyleTag && /*#__PURE__*/_react["default"].createElement("style", {
        type: "text/css",
        dangerouslySetInnerHTML: {
          __html: (0, _styleUtilities.getImgTagStyles)()
        }
      }));
    }
  }]);

  return Carousel;
}(_react["default"].Component);

exports["default"] = Carousel;
Carousel.propTypes = {
  afterSlide: _propTypes["default"].func,
  animation: _propTypes["default"].oneOf(['zoom']),
  autoGenerateStyleTag: _propTypes["default"].bool,
  autoplay: _propTypes["default"].bool,
  autoplayInterval: _propTypes["default"].number,
  autoplayReverse: _propTypes["default"].bool,
  beforeSlide: _propTypes["default"].func,
  cellAlign: _propTypes["default"].oneOf(['left', 'center', 'right']),
  cellSpacing: _propTypes["default"].number,
  getControlsContainerStyles: _propTypes["default"].func,
  defaultControlsConfig: _propTypes["default"].shape({
    containerClassName: _propTypes["default"].string,
    nextButtonClassName: _propTypes["default"].string,
    nextButtonStyle: _propTypes["default"].object,
    nextButtonText: _propTypes["default"].string,
    prevButtonClassName: _propTypes["default"].string,
    prevButtonStyle: _propTypes["default"].object,
    prevButtonText: _propTypes["default"].string,
    pagingDotsContainerClassName: _propTypes["default"].string,
    pagingDotsClassName: _propTypes["default"].string,
    pagingDotsStyle: _propTypes["default"].object
  }),
  disableAnimation: _propTypes["default"].bool,
  disableEdgeSwiping: _propTypes["default"].bool,
  dragging: _propTypes["default"].bool,
  easing: _propTypes["default"].string,
  edgeEasing: _propTypes["default"].string,
  enableKeyboardControls: _propTypes["default"].bool,
  frameOverflow: _propTypes["default"].string,
  framePadding: _propTypes["default"].string,
  height: _propTypes["default"].string,
  heightMode: _propTypes["default"].oneOf(['first', 'current', 'max']),
  innerRef: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].shape({
    current: _propTypes["default"].elementType
  })]),
  initialSlideHeight: _propTypes["default"].number,
  initialSlideWidth: _propTypes["default"].number,
  keyCodeConfig: _propTypes["default"].exact({
    previousSlide: _propTypes["default"].arrayOf(_propTypes["default"].number),
    nextSlide: _propTypes["default"].arrayOf(_propTypes["default"].number),
    firstSlide: _propTypes["default"].arrayOf(_propTypes["default"].number),
    lastSlide: _propTypes["default"].arrayOf(_propTypes["default"].number),
    pause: _propTypes["default"].arrayOf(_propTypes["default"].number)
  }),
  onDragStart: _propTypes["default"].func,
  onResize: _propTypes["default"].func,
  opacityScale: _propTypes["default"].number,
  pauseOnHover: _propTypes["default"].bool,
  renderAnnounceSlideMessage: _propTypes["default"].func,
  renderBottomCenterControls: _propTypes["default"].func,
  renderBottomLeftControls: _propTypes["default"].func,
  renderBottomRightControls: _propTypes["default"].func,
  renderCenterCenterControls: _propTypes["default"].func,
  renderCenterLeftControls: _propTypes["default"].func,
  renderCenterRightControls: _propTypes["default"].func,
  renderTopCenterControls: _propTypes["default"].func,
  renderTopLeftControls: _propTypes["default"].func,
  renderTopRightControls: _propTypes["default"].func,
  scrollMode: _propTypes["default"].oneOf(['page', 'remainder']),
  slideIndex: _propTypes["default"].number,
  slideListMargin: _propTypes["default"].number,
  slideOffset: _propTypes["default"].number,
  slidesToScroll: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].oneOf(['auto'])]),
  slidesToShow: _propTypes["default"].number,
  slideWidth: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number]),
  speed: _propTypes["default"].number,
  swiping: _propTypes["default"].bool,
  transitionMode: _propTypes["default"].oneOf(['scroll', 'fade', 'scroll3d']),
  vertical: _propTypes["default"].bool,
  width: _propTypes["default"].string,
  withoutControls: _propTypes["default"].bool,
  wrapAround: _propTypes["default"].bool
};
Carousel.defaultProps = {
  afterSlide: function afterSlide() {},
  autoGenerateStyleTag: true,
  autoplay: false,
  autoplayInterval: 3000,
  autoplayReverse: false,
  beforeSlide: function beforeSlide() {},
  cellAlign: 'left',
  cellSpacing: 0,
  getControlsContainerStyles: function getControlsContainerStyles() {},
  defaultControlsConfig: {},
  disableAnimation: false,
  disableEdgeSwiping: false,
  dragging: true,
  easing: 'easeCircleOut',
  edgeEasing: 'easeElasticOut',
  enableKeyboardControls: false,
  frameOverflow: 'hidden',
  framePadding: '0px',
  height: 'inherit',
  heightMode: 'max',
  keyCodeConfig: {},
  onDragStart: function onDragStart() {},
  onResize: function onResize() {},
  pauseOnHover: true,
  renderAnnounceSlideMessage: _announceSlide.defaultRenderAnnounceSlideMessage,
  renderBottomCenterControls: function renderBottomCenterControls(props) {
    return /*#__PURE__*/_react["default"].createElement(_defaultControls.PagingDots, props);
  },
  renderCenterLeftControls: function renderCenterLeftControls(props) {
    return /*#__PURE__*/_react["default"].createElement(_defaultControls.PreviousButton, props);
  },
  renderCenterRightControls: function renderCenterRightControls(props) {
    return /*#__PURE__*/_react["default"].createElement(_defaultControls.NextButton, props);
  },
  scrollMode: 'remainder',
  slideIndex: 0,
  slideListMargin: 10,
  slideOffset: 25,
  slidesToScroll: 1,
  slidesToShow: 1,
  slideWidth: 1,
  speed: 500,
  style: {},
  swiping: true,
  transitionMode: 'scroll',
  vertical: false,
  width: '100%',
  withoutControls: false,
  wrapAround: false
};